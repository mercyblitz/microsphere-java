/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.microsphere.util;

import io.microsphere.annotation.Nonnull;
import io.microsphere.io.StringBuilderWriter;

import java.io.PrintWriter;

import static io.microsphere.text.FormatUtils.format;
import static io.microsphere.util.ClassUtils.isAssignableFrom;
import static io.microsphere.util.ClassUtils.newInstance;

/**
 * {@link Exception} Utilities class
 *
 * @author <a href="mailto:mercyblitz@gmail.com">Mercy</a>
 * @since 1.0.0
 */
public abstract class ExceptionUtils implements Utils {

    /**
     * <p>Gets the stack trace from a Throwable as a String.</p>
     *
     * <p>The result of this method may vary by JDK version as this method
     * uses {@link Throwable#printStackTrace(java.io.PrintWriter)}.
     * On JDK1.3 and earlier, the cause exception will not be shown
     * unless the specified throwable alters printStackTrace.</p>
     *
     * <h3>Example Usage</h3>
     * <pre>{@code
     * try {
     *     // some code that may throw an exception
     * } catch (Exception e) {
     *     String stackTrace = ExceptionUtils.getStackTrace(e);
     *     System.out.println(stackTrace);
     * }
     * }</pre>
     *
     * @param throwable the <code>Throwable</code> to be examined
     * @return the stack trace as generated by the exception's
     * <code>printStackTrace(PrintWriter)</code> method
     */
    @Nonnull
    public static String getStackTrace(Throwable throwable) {
        StringBuilderWriter sw = new StringBuilderWriter();
        throwable.printStackTrace(new PrintWriter(sw, true));
        return sw.toString();
    }

    /**
     * <p>Wraps the given source exception into a new instance of the specified type.</p>
     *
     * <p>If the source exception is already assignable to the target type, it is returned directly.
     * Otherwise, a new instance of the target type is created using suitable constructor arguments
     * derived from the source exception.</p>
     *
     * <h3>Example Usages</h3>
     * <pre>{@code
     * try {
     *     // some code that throws an IOException
     * } catch (IOException e) {
     *     RuntimeException re = ExceptionUtils.wrap(e, RuntimeException.class);
     *     throw re;
     * }
     * }</pre>
     *
     * <pre>{@code
     * try {
     *     // some code that throws an IllegalArgumentException
     * } catch (IllegalArgumentException e) {
     *     MyCustomException myEx = ExceptionUtils.wrap(e, MyCustomException.class);
     *     throw myEx;
     * }
     * }</pre>
     *
     * @param <T>        the type of the source exception
     * @param <TT>       the type to wrap the source exception into
     * @param source     the source exception to be wrapped
     * @param thrownType the class of the target type to wrap into
     * @return an instance of the target type wrapping or referencing the source exception
     */
    @Nonnull
    public static <T extends Throwable, TT extends Throwable> TT wrap(T source, Class<TT> thrownType) {
        if (isAssignableFrom(thrownType, source.getClass())) {
            return (TT) source;
        }
        Object[] args = resolveArguments(source);
        return newInstance(thrownType, args);
    }

    /**
     * <p>Creates a new instance of the specified Throwable class using its default constructor.</p>
     *
     * <h3>Example Usage</h3>
     * <pre>{@code
     * try {
     *     // some code that may throw an exception
     * } catch (Exception e) {
     *     RuntimeException re = ExceptionUtils.create(RuntimeException.class);
     *     throw re;
     * }
     * }</pre>
     *
     * @param <T>           the type of the Throwable to be created
     * @param throwableClass the Class object of the Throwable to instantiate
     * @return a new instance of the specified Throwable
     */
    @Nonnull
    public static <T extends Throwable> T create(Class<T> throwableClass) {
        return newInstance(throwableClass);
    }

    /**
     * <p>Creates a new instance of the specified Throwable class with the provided detail message.</p>
     *
     * <h3>Example Usage</h3>
     * <pre>{@code
     * try {
     *     // some code that may throw an exception
     * } catch (Exception e) {
     *     RuntimeException re = ExceptionUtils.create(RuntimeException.class, "An error occurred");
     *     throw re;
     * }
     * }</pre>
     *
     * @param <T>            the type of the Throwable to be created
     * @param throwableClass the Class object of the Throwable to instantiate
     * @param message        the detail message for the Throwable
     * @return a new instance of the specified Throwable with the provided message
     */
    @Nonnull
    public static <T extends Throwable> T create(Class<T> throwableClass, String message) {
        return newInstance(throwableClass, message);
    }

    /**
     * <p>Creates a new instance of the specified Throwable class with the provided cause.</p>
     *
     * <h3>Example Usage</h3>
     * <pre>{@code
     * try {
     *     // some code that may throw an exception
     * } catch (Exception e) {
     *     RuntimeException re = ExceptionUtils.create(RuntimeException.class, e);
     *     throw re;
     * }
     * }</pre>
     *
     * @param <T>            the type of the Throwable to be created
     * @param throwableClass the Class object of the Throwable to instantiate
     * @param cause          the cause (which is usually an exception that was caught)
     * @return a new instance of the specified Throwable with the provided cause
     */
    @Nonnull
    public static <T extends Throwable> T create(Class<T> throwableClass, Throwable cause) {
        return newInstance(throwableClass, cause);
    }

    /**
     * <p>Creates a new instance of the specified Throwable class with the provided detail message and cause.</p>
     *
     * <h3>Example Usage</h3>
     * <pre>{@code
     * try {
     *     // some code that may throw an exception
     * } catch (Exception e) {
     *     RuntimeException re = ExceptionUtils.create(RuntimeException.class, "An error occurred", e);
     *     throw re;
     * }
     * }</pre>
     *
     * @param <T>            the type of the Throwable to be created
     * @param throwableClass the Class object of the Throwable to instantiate
     * @param message        the detail message for the Throwable
     * @param cause          the cause (which is usually an exception that was caught)
     * @return a new instance of the specified Throwable with the provided message and cause
     */
    @Nonnull
    public static <T extends Throwable> T create(Class<T> throwableClass, String message, Throwable cause) {
        return newInstance(throwableClass, message, cause);
    }

    /**
     * <p>Creates a new instance of the specified Throwable class with a formatted detail message and cause.</p>
     *
     * <p>This method formats the message using the provided pattern and arguments, then creates a new instance
     * of the target Throwable type with both the formatted message and the cause.</p>
     *
     * <h3>Example Usage</h3>
     * <pre>{@code
     * try {
     *     // some code that may throw an exception
     * } catch (Exception e) {
     *     RuntimeException re = ExceptionUtils.create(
     *         RuntimeException.class,
     *         e,
     *         "An error occurred with code: %d",
     *         500
     *     );
     *     throw re;
     * }
     * }</pre>
     *
     * @param <T>            the type of the Throwable to be created
     * @param throwableClass the Class object of the Throwable to instantiate
     * @param cause          the cause (which is usually an exception that was caught)
     * @param messagePattern the pattern used to format the detail message
     * @param args           the arguments used to replace placeholders in the message pattern
     * @return a new instance of the specified Throwable with the formatted message and cause
     */
    @Nonnull
    public static <T extends Throwable> T create(Class<T> throwableClass, Throwable cause, String messagePattern, Object... args) {
        String message = format(messagePattern, args);
        return create(throwableClass, message, cause);
    }

    /**
     * <p>Creates a new instance of the specified Throwable class using constructor arguments.</p>
     *
     * <p>This method attempts to instantiate the target Throwable class by matching and using
     * the provided constructor arguments. It is particularly useful when the exact combination
     * of constructor parameters is known and needs to be dynamically applied.</p>
     *
     * <h3>Example Usages</h3>
     * <pre>{@code
     * try {
     *     // some code that may throw an exception
     * } catch (Exception e) {
     *     RuntimeException re = ExceptionUtils.create(RuntimeException.class, "Error", e);
     *     throw re;
     * }
     * }</pre>
     *
     * <pre>{@code
     * try {
     *     // some code that may throw an exception
     * } catch (Throwable t) {
     *     IOException ioEx = ExceptionUtils.create(IOException.class, "File not found");
     *     throw ioEx;
     * }
     * }</pre>
     *
     * @param <T>            the type of the Throwable to be created
     * @param throwableClass the Class object of the Throwable to instantiate
     * @param args           the variable-length list of constructor arguments used for instantiation
     * @return a new instance of the specified Throwable initialized with the given arguments
     */
    @Nonnull
    public static <T extends Throwable> T create(Class<T> throwableClass, Object... args) {
        return newInstance(throwableClass, args);
    }

    /**
     * <p>Throws the given source exception wrapped into the specified target exception type.</p>
     *
     * <p>If the source exception is already assignable to the target type, it will be rethrown directly.
     * Otherwise, a new instance of the target type is created using suitable constructor arguments
     * derived from the source exception.</p>
     *
     * <h3>Example Usages</h3>
     * <pre>{@code
     * try {
     *     // some code that throws an IOException
     * } catch (IOException e) {
     *     throw ExceptionUtils.throwTarget(e, RuntimeException.class); // Rethrows as RuntimeException
     * }
     * }</pre>
     *
     * <pre>{@code
     * try {
     *     // some code that throws an IllegalArgumentException
     * } catch (IllegalArgumentException e) {
     *     throw ExceptionUtils.throwTarget(e, MyCustomException.class); // Wraps and throws as MyCustomException
     * }
     * }</pre>
     *
     * @param <T>        the type of the source exception
     * @param <TT>       the type to wrap the source exception into before throwing
     * @param source     the source exception to be wrapped and thrown
     * @param thrownType the class of the target type to wrap into
     * @return this method does not return anything; it always throws an exception
     * @throws TT wraps and throws the source or newly created target exception
     */
    @Nonnull
    public static <T extends Throwable, TT extends Throwable> TT throwTarget(T source, Class<TT> thrownType) throws TT {
        throw wrap(source, thrownType);
    }

    private static <T extends Throwable> Object[] resolveArguments(T source) {
        String message = source.getMessage();
        Throwable cause = source.getCause() == null ? source : source.getCause();
        return message == null ? new Object[]{cause} : new Object[]{message, cause};
    }

    private ExceptionUtils() {
    }
}
